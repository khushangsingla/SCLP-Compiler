	Token Name: VOID 	Lexeme: void 	 Lineno: 1
	Token Name: NAME 	Lexeme: main 	 Lineno: 1
	Token Name: LEFT_ROUND_BRACKET 	Lexeme: ( 	 Lineno: 1
	Token Name: RIGHT_ROUND_BRACKET 	Lexeme: ) 	 Lineno: 1
	Token Name: LEFT_CURLY_BRACKET 	Lexeme: { 	 Lineno: 2
	Token Name: FLOAT 	Lexeme: float 	 Lineno: 3
	Token Name: NAME 	Lexeme: a 	 Lineno: 3
	Token Name: COMMA 	Lexeme: , 	 Lineno: 3
	Token Name: NAME 	Lexeme: b 	 Lineno: 3
	Token Name: SEMICOLON 	Lexeme: ; 	 Lineno: 3
	Token Name: STRING 	Lexeme: string 	 Lineno: 4
	Token Name: NAME 	Lexeme: s 	 Lineno: 4
	Token Name: SEMICOLON 	Lexeme: ; 	 Lineno: 4
	Token Name: READ 	Lexeme: read 	 Lineno: 6
	Token Name: NAME 	Lexeme: a 	 Lineno: 6
	Token Name: SEMICOLON 	Lexeme: ; 	 Lineno: 6
	Token Name: READ 	Lexeme: read 	 Lineno: 7
	Token Name: NAME 	Lexeme: b 	 Lineno: 7
	Token Name: SEMICOLON 	Lexeme: ; 	 Lineno: 7
	Token Name: NAME 	Lexeme: s 	 Lineno: 10
	Token Name: ASSIGN_OP 	Lexeme: = 	 Lineno: 10
	Token Name: NAME 	Lexeme: a 	 Lineno: 10
	Token Name: PLUS 	Lexeme: + 	 Lineno: 10
	Token Name: NAME 	Lexeme: b 	 Lineno: 10
	Token Name: GREATER_THAN 	Lexeme: > 	 Lineno: 10
	Token Name: INT_NUM 	Lexeme: 0 	 Lineno: 10
	Token Name: OR 	Lexeme: || 	 Lineno: 10
	Token Name: NAME 	Lexeme: b 	 Lineno: 10
	Token Name: OP_FOR_TERNARY_EXPR 	Lexeme: ? 	 Lineno: 10
	Token Name: STR_CONST 	Lexeme: "works" 	 Lineno: 10
	Token Name: OP_FOR_TERNARY_EXPR 	Lexeme: : 	 Lineno: 10
	Token Name: STR_CONST 	Lexeme: "doesnt work" 	 Lineno: 10
	Token Name: SEMICOLON 	Lexeme: ; 	 Lineno: 10
	Token Name: WRITE 	Lexeme: print 	 Lineno: 11
	Token Name: NAME 	Lexeme: s 	 Lineno: 11
	Token Name: SEMICOLON 	Lexeme: ; 	 Lineno: 11
	Token Name: RIGHT_CURLY_BRACKET 	Lexeme: } 	 Lineno: 12
